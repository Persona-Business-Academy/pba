generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               Int      @id @default(autoincrement())
    email            String   @unique
    firstName        String?  @db.VarChar(45)
    lastName         String?  @db.VarChar(45)
    password         String   @db.VarChar(60)
    phone            String?  @db.VarChar(60)
    address          String?  @db.VarChar(60)
    country          String?  @db.VarChar(60)
    state            String?  @db.VarChar(60)
    city             String?  @db.VarChar(60)
    avatar           String   @db.Text
    confirmationCode Int?     @unique
    createdAt        DateTime @default(now()) @db.Timestamp(0)
    updatedAt        DateTime @updatedAt @db.Timestamp(0)

    onlineCourseComment OnlineCourseComment[]
}

model Admin {
    id        Int       @id @default(autoincrement())
    email     String    @unique
    firstName String?   @db.VarChar(45)
    lastName  String?   @db.VarChar(45)
    password  String    @db.VarChar(60)
    role      AdminRole
    createdAt DateTime  @default(now()) @db.Timestamp(0)
    updatedAt DateTime  @updatedAt @db.Timestamp(0)
}

model OnlineCourse {
    id                     Int        @id @default(autoincrement())
    name                   String     @db.VarChar(45)
    description            String     @db.Text
    coverPhoto             String     @db.Text
    whatYouWillLearn       Json       @db.Json
    rate                   Float
    language               Language
    duration               Float
    courseLevel            SkillLevel
    topic                  String     @db.VarChar(45)
    graduatedStudentsCount Int
    createdAt              DateTime   @default(now()) @db.Timestamp(0)
    updatedAt              DateTime   @updatedAt @db.Timestamp(0)
    instructorId           Int
    Instructor             Instructor @relation(fields: [instructorId], references: [id])

    comments OnlineCourseComment[]
    levels   OnlineCourseLevel[]
    days     OnlineCourseDay[]
    videos   OnlineCourseVideo[]
}

model OnlineCourseLevel {
    id        Int      @id @default(autoincrement())
    level     String   @db.VarChar(45)
    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    onlineCourseId Int

    OnlineCourse OnlineCourse @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)

    days   OnlineCourseDay[]
    videos OnlineCourseVideo[]
}

model OnlineCourseDay {
    id        Int      @id @default(autoincrement())
    label     String   @db.VarChar(45)
    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    onlineCourseId      Int
    onlineCourseLevelId Int

    OnlineCourse      OnlineCourse      @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)
    OnlineCourseLevel OnlineCourseLevel @relation(fields: [onlineCourseLevelId], references: [id], onDelete: Cascade)

    videos OnlineCourseVideo[]
}

model OnlineCourseVideo {
    id        Int      @id @default(autoincrement())
    key       String   @db.Text
    name      String   @db.Text
    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    onlineCourseId      Int
    onlineCourseLevelId Int
    onlineCourseDayId   Int

    OnlineCourse      OnlineCourse      @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)
    OnlineCourseLevel OnlineCourseLevel @relation(fields: [onlineCourseLevelId], references: [id], onDelete: Cascade)
    OnlineCourseDay   OnlineCourseDay   @relation(fields: [onlineCourseDayId], references: [id], onDelete: Cascade)
}

model OnlineCourseComment {
    id       Int    @id @default(autoincrement())
    headline String @db.Text
    text     String @db.Text
    author   User   @relation(fields: [authorId], references: [id])

    authorId       Int
    onlineCourseId Int?

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    OnlineCourse OnlineCourse? @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)
}

model Instructor {
    id        Int    @id @default(autoincrement())
    firstName String @db.VarChar(45)
    lastName  String @db.VarChar(45)
    about     String @db.Text
    avatar    String @db.Text

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    onlineCourse OnlineCourse[]
}

enum AdminRole {
    ADMIN
    SUPER_ADMIN
}

enum Language {
    EN
    ARM
}

enum SkillLevel {
    BEGINNER
    INTERMEDIATE
    ADVANCED
    MASTER
}
